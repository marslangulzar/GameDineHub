@model BusinessEntities.Entities.Game.TeamVM
@{
    ViewBag.Title = "Manage";
    Layout = "~/Views/Shared/_LayoutNoNav.cshtml";
}
@*<style>
        body{
            overflow-y:hidden;
        }
    </style>*@
@*Below code is commented after VCR feedback(Date 2020-12-2-02) .*@
@*<script src="https://sdk.scdn.co/spotify-player.js"></script>
    <script>
        var player;
        var token;
        if ("@Model.IsSpotifyLogin"=="True") {
            window.onSpotifyWebPlaybackSDKReady = () => {
                //const token = 'BQBPqsIuUyh_gCxp7RFQMH5SFX566sBXCDM6iHh5bj8EfxDskRygEUsd6f9OmlaSAk_9REkpmOyWUkWKDc0UHFJ4W55Anm2RaRnAYY7x_aV21qp415oBti88Xi1Bw8Z0r0JMgaWbwKLXs3yet-oL5T6_G_QNvjQF6xJFcn_wAUyFkca1uawYZIr7Vr2HfETwn7N0Xtk0cw';
                console.log("player", player);
                refreshToken();
                //debugger
                player = new Spotify.Player({
                    name: 'Web Playback SDK Quick Start Player',
                    getOAuthToken: cb => { cb(token); }
                });

                // Error handling
                player.addListener('initialization_error', ({ message }) => { console.error("initialization_error", message); });
                player.addListener('authentication_error', ({ message }) => { console.error("authentication_error", message); });
                player.addListener('account_error', ({ message }) => { console.error("account_error", message); });
                player.addListener('playback_error', ({ message }) => { console.error("playback_error", message); });

                // Playback status updates
                player.addListener('player_state_changed', state => { console.log("player_state_changed", state); });

                // Ready
                player.addListener('ready', ({ device_id }) => {
                    console.log('Ready with Device ID', device_id);
                });

                // Not Ready
                player.addListener('not_ready', ({ device_id }) => {
                    console.log('Device ID has gone offline', device_id);
                });

                // Connect to the player!
                player.connect().then(success => {
                    if (success) {
                        console.log('The Web Playback SDK successfully connected to Spotify!');
                    }
                    else {
                        console.log('The Web Playback SDK failed to connect Spotify!');
                    }
                })
            };
        }
    </script>*@

<div class="row">


    <div class="col-12">
        @*Below code is commented after VCR feedback(Date 2020-12-2-02) .*@
        @*<input type="hidden" id="spotifyLogin" value="@ViewBag.IsSpotifyLogin" />
            @if (!Model.IsSpotifyLogin)
            {


                <div class="alert bg-warning-900 text-white fade show mr-1" role="alert">
                    <div class="d-flex align-items-center">
                        <div class="alert-icon">
                            <i class="fal fa-info-circle"></i>
                        </div>
                        <div class="flex-1">
                            <span class="h5">Please refresh your spotify token in order to play and pause songs</span>
                        </div>
                        <a href="~/General/GetSpotifyToken" class="btn btn-primary btn-pills btn-sm width-18 waves-effect waves-themed">Spotify Token</a>
                    </div>
                </div>

            }*@
        <a href="~/account/logout" class="btn btn-danger rounded btn-sm mb-3 float-right"><i class="fal fa-sign-out mr-1"></i>Logout</a>
    </div>
</div>
<div class="row">
    <div class="col-sm-12 col-md-12 col-lg-4">
        <div class="row">
            <div class="col-lg-12 col-xs-12 col-md-12 col-sm-12">
                <div id="panel-1" class="panel h-100">
                    <div class="panel-hdr">
                        <h2 class="fw-700">
                            Scenario
                        </h2>
                    </div>
                    <div class="panel-container show">
                        <div class="panel-content">
                            <input type="hidden" id="sitePropertyID" value="@ViewBag.SitePropertyID" />
                            <div class="panel-tag">
                                Please enter any announcement for your customers.
                            </div>
                            <div class="form-group">
                                <input type="text" id="example-input-material" maxlength="200" value="@TempData["Message"]" class="form-control form-control-lg rounded-0 border-top-0 border-left-0 border-right-0 px-0 bg-transparent" required placeholder="Message of the day.">
                                <span class="help-block">200 characters allowed</span>
                                <div class="text-danger" id="validation"></div>
                            </div>
                            <div class="form-group float-right">
                                <button type="button" id="publish" class="btn btn-primary btn-lg waves-effect waves-themed"><i class="fal fa-paper-plane mr-2"></i>Publish</button>
                            </div>
                            @*</div>*@
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-sm-12 col-md-12 col-lg-8">
        <div class="row mb-2">
            <div class="col-12">
                <div class="d-flex justify-content-end">
                    <button type="button" @((bool)TempData["VotingRoundStatus"] == true ? "disabled" : ViewBag.SongsCount > 0 ? "" : "disabled") id="startVoting" class="btn btn-primary btn-lg waves-effect waves-themed mr-5"><i class="fas fa-play mr-1"></i>Start Voting</button>
                    <button type="button" @((bool)TempData["VotingRoundStatus"] == true ? "" : "disabled") id="endVoting" class="btn btn-warning btn-lg waves-effect waves-themed"><i class="fas fa-stop mr-1"></i> End Voting</button>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12 col-xs-12 col-md-12 col-sm-12">
                <div id="votingListSection" style="max-height:73vh; overflow-y:auto">
                    @{ Html.RenderPartial("_VotingViewScreen", Model.teamSongList); }
                </div>
            </div>
        </div>
    </div>
</div>





<script type="text/javascript">
        @* Below code is commented after VCR feedback(Date 2020 - 12 - 2 - 02).*@
        @*const play = ({
            spotify_uri,
            playerInstance: {
                _options: {
                    getOAuthToken,
                    id
                }
            }
        }) => {
            getOAuthToken(access_token => {
                fetch(`https://api.spotify.com/v1/me/player/play?device_id=${id}`, {
                    method: 'PUT',
                    body: JSON.stringify({ uris: [spotify_uri] }),
                    headers: {
                        'Content-Type': 'application/json',
                        'Authorization': `Bearer ${access_token}`
                    },
                });
            });
        };
        $('.playSongBtn').click(function () {

            if ("@Model.IsSpotifyLogin" == "True") {
                var songUrl = $(this).data("url");
                var id = $(this).data("id");

                $('.playSongBtn').removeClass('d-none');
                $('.pauseSongBtn').addClass('d-none');

                $("#playSong_" + id).addClass('d-none');
                $("#stopSong_" + id).removeClass('d-none')

                console.log("Player", player);
                play({
                    playerInstance: player,
                    spotify_uri: songUrl,
                });
            } else {
                ilms.showAlertWithType("Sorry, you cannot play or pause songs. Please refresh your spotify token.", "warning", 6000);
            }

        })

        $('.pauseSongBtn').click(function () {
            var id = $(this).data("id");


            player.pause().then(() => {
                console.log('Paused!');
            });

            $("#playSong_" + id).removeClass('d-none')
            $("#stopSong_" + id).addClass('d-none')
        })*@




        $('#publish').click(function () {

            if ($('#example-input-material').val().length === 0) {
                $('#validation').text("Please enter any messages");
                return;
            } else {
                $('#validation').text("");

            }

            var url = "/General/ThemeCast";
            var _name = $('#example-input-material').val();
            var _ID = $('#sitePropertyID').val();
            ilms.ajaxPostCall(url, { ID: _ID,  name: _name }, function (data) {
                if (data.status) {
                    $('#sitePropertyID').val(data.ID);
                    ilms.showAlertWithType(data.message, 'success');
                } else {
                    ilms.showAlertWithType(data.message, 'error');
                }
            }, null, false)

        })


        function Play(id) {
            var url = "/General/";
            var _songUrl = $('#songUrl_' + id).val();
            alert(_songUrl);
            ilms.ajaxPostCall(url, { text: _songUrl }, function (data) {
                if (data.status) {
                    ilms.showAlertWithType(data.message, 'success');
                } else {
                    ilms.showAlertWithType(data.message, 'error');
                }
            }, null, false)
        }


        $('#startVoting').click(function () {
            var url = "/General/Voting";
            ilms.ajaxPostCall(url, { startVoting: true }, function (data) {
                if (data.status) {
                    ilms.showAlertWithType(data.message, 'success');
                    $("#startVoting").attr("disabled", true)
                    $("#endVoting").attr("disabled", false)
                    $("#publish").attr("disabled", true)
                     /*window.location.reload();*/
                    refreshVotingGrid();
                } else {
                    ilms.showAlertWithType(data.message, 'error');
                }
            }, null, false)
        })

        $('#endVoting').click(function () {
            var url = "/General/Voting";
            var _roundId = $('#roundId').val();
            ilms.ajaxPostCall(url, { startVoting: false }, function (data) {
                if (data.status) {
                    ilms.showAlertWithType(data.message, 'success');
                    //$("#startVoting").attr("disabled", false)
                    $("#endVoting").attr("disabled", true)
                    $("#publish").attr("disabled", false)
                    //Add by azhar
                    window.location.reload();
                } else {
                    ilms.showAlertWithType(data.message, 'error');
                }
            }, null, false)
        })

        function refreshVotingGrid() {
            try {

                var requestParams = {};
                var pageUrl = "/General/GetVotingSongForAdminDisplay";

                ilms.partialPageLoadingToElement(pageUrl, requestParams, 'votingListSection');
            } catch (e) {
            }
        }
        @* Below code is commented after VCR feedback(Date 2020 - 12 - 2 - 02).*@
        //function refreshToken() {
        //    var url = "/General/GetToken";
        //    ilms.ajaxPostCallAsync(url, {}, function (data) {
        //        if (data != null) {
        //            token = data;
        //        } else {
        //            ilms.showAlertWithType(data.message, 'error');
        //        }
        //    }, null, false)
        //}
</script>
